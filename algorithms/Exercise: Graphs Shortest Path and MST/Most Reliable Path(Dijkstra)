from collections import deque
from queue import PriorityQueue


class Edge:
    def __init__(self, first, second, weight):
        self.first = first
        self.second = second
        self.weight = weight


nodes = int(input())
edges = int(input())

graph = [[] for _ in range(nodes + 1)]

for _ in range(edges):
    first, second, weight = [int(x) for x in input().split()]
    edge = Edge(first, second, weight)
    graph[first].append(edge)
    graph[second].append(edge)

start_node = int(input())
end_node = int(input())

parent_array = [None] * (nodes + 1)
distance_array = [float('-inf')] * (nodes + 1)
distance_array[start_node] = 100

pq = PriorityQueue()
pq.put((-100, start_node))

while not pq.empty():
    distance, node = pq.get()
    if node == end_node:
        break
    for edge in graph[node]:
        child = edge.first if edge.second == node else edge.second
        new_distance = -distance * edge.weight / 100
        if new_distance > distance_array[child]:
            distance_array[child] = new_distance
            parent_array[child] = node
            pq.put((-new_distance, child))

path = deque()
node = end_node
while node is not None:
    path.appendleft(node)
    node = parent_array[node]
print(f'Most reliable path reliability: {distance_array[end_node]:.2f}%')
print(*path, sep=' -> ')
