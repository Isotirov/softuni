buildings = int(input())
streets = int(input())

graph = [[] for _ in range(buildings)]
edges = set()
removed_edges = []

for _ in range(streets):
    source, destination = map(int, input().split(' - '))
    graph[source].append(destination)
    graph[destination].append(source)
    edges.add((min(source, destination), max(source, destination)))


def dfs(node, graph, visited):
    if visited[node]:
        return
    visited[node] = True
    for child in graph[node]:
        dfs(child, graph, visited)


for source, destination in edges:
    graph[source].remove(destination)
    graph[destination].remove(source)

    visited = [False] * buildings
    dfs(0, graph, visited)
    if not all(visited):
        removed_edges.append((source, destination))
    graph[source].append(destination)
    graph[destination].append(source)

print('Important streets:')
if removed_edges:
    for s, d in removed_edges:
        print(s, d)
