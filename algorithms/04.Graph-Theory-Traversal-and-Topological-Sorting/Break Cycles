n = int(input())

graph = {}
edges = []
removed_edges = []

for _ in range(n):
    source, destinations = input().split(' -> ')
    children = []
    for child in destinations.split():
        children.append(child)
        edges.append((source, child))
        edges.append((child, source))
    graph[source] = children


def dfs(source, destination, graph, visited):
    if source in visited:
        return
    visited.add(source)
    if source == destinations:
        return
    for child in graph[source]:
        dfs(child, destination, graph, visited)


def path_exists(source, destination, graph):
    visited = set()
    dfs(source, destination, graph, visited)
    return destination in visited


for source, destination in sorted(edges):
    if source not in graph[destination]:
        continue
    if destination not in graph[source]:
        continue
    graph[source].remove(destination)
    graph[destination].remove(source)
    if path_exists(source, destination, graph):
        removed_edges.append((source, destination))

    else:
        graph[source].append(destination)
        graph[destination].append(source)

print(f'Edges to remove: {len(removed_edges)}')
for s, d in removed_edges:
    print(f'{s} - {d}')
